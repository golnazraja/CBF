// Generated by gencpp from file dodgeros_msgs/RotorFeedbackStamped.msg
// DO NOT EDIT!


#ifndef DODGEROS_MSGS_MESSAGE_ROTORFEEDBACKSTAMPED_H
#define DODGEROS_MSGS_MESSAGE_ROTORFEEDBACKSTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dodgeros_msgs
{
template <class ContainerAllocator>
struct RotorFeedbackStamped_
{
  typedef RotorFeedbackStamped_<ContainerAllocator> Type;

  RotorFeedbackStamped_()
    : header()
    , type(0)
    , data()  {
    }
  RotorFeedbackStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _type_type;
  _type_type type;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _data_type;
  _data_type data;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INVALID_TYPE)
  #undef INVALID_TYPE
#endif
#if defined(_WIN32) && defined(THROTTLE_TYPE)
  #undef THROTTLE_TYPE
#endif
#if defined(_WIN32) && defined(SPEED_TYPE)
  #undef SPEED_TYPE
#endif
#if defined(_WIN32) && defined(THRUST_TYPE)
  #undef THRUST_TYPE
#endif

  enum {
    INVALID_TYPE = 0u,
    THROTTLE_TYPE = 1u,
    SPEED_TYPE = 2u,
    THRUST_TYPE = 3u,
  };


  typedef boost::shared_ptr< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> const> ConstPtr;

}; // struct RotorFeedbackStamped_

typedef ::dodgeros_msgs::RotorFeedbackStamped_<std::allocator<void> > RotorFeedbackStamped;

typedef boost::shared_ptr< ::dodgeros_msgs::RotorFeedbackStamped > RotorFeedbackStampedPtr;
typedef boost::shared_ptr< ::dodgeros_msgs::RotorFeedbackStamped const> RotorFeedbackStampedConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator1> & lhs, const ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator1> & lhs, const ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dodgeros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "560b56e6d217d5f5e6727c4defa2f6b7";
  }

  static const char* value(const ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x560b56e6d217d5f5ULL;
  static const uint64_t static_value2 = 0xe6727c4defa2f6b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dodgeros_msgs/RotorFeedbackStamped";
  }

  static const char* value(const ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 type\n"
"float32[] data\n"
"\n"
"uint8 INVALID_TYPE = 0\n"
"uint8 THROTTLE_TYPE = 1\n"
"uint8 SPEED_TYPE = 2\n"
"uint8 THRUST_TYPE = 3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RotorFeedbackStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dodgeros_msgs::RotorFeedbackStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DODGEROS_MSGS_MESSAGE_ROTORFEEDBACKSTAMPED_H
