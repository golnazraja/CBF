// Generated by gencpp from file dodgeros_msgs/Command.msg
// DO NOT EDIT!


#ifndef DODGEROS_MSGS_MESSAGE_COMMAND_H
#define DODGEROS_MSGS_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace dodgeros_msgs
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : header()
    , t(0.0)
    , is_single_rotor_thrust(false)
    , collective_thrust(0.0)
    , bodyrates()
    , thrusts()  {
      thrusts.assign(0.0);
  }
  Command_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , t(0.0)
    , is_single_rotor_thrust(false)
    , collective_thrust(0.0)
    , bodyrates(_alloc)
    , thrusts()  {
  (void)_alloc;
      thrusts.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _t_type;
  _t_type t;

   typedef uint8_t _is_single_rotor_thrust_type;
  _is_single_rotor_thrust_type is_single_rotor_thrust;

   typedef double _collective_thrust_type;
  _collective_thrust_type collective_thrust;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _bodyrates_type;
  _bodyrates_type bodyrates;

   typedef boost::array<double, 4>  _thrusts_type;
  _thrusts_type thrusts;





  typedef boost::shared_ptr< ::dodgeros_msgs::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dodgeros_msgs::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::dodgeros_msgs::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::dodgeros_msgs::Command > CommandPtr;
typedef boost::shared_ptr< ::dodgeros_msgs::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dodgeros_msgs::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dodgeros_msgs::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dodgeros_msgs::Command_<ContainerAllocator1> & lhs, const ::dodgeros_msgs::Command_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.t == rhs.t &&
    lhs.is_single_rotor_thrust == rhs.is_single_rotor_thrust &&
    lhs.collective_thrust == rhs.collective_thrust &&
    lhs.bodyrates == rhs.bodyrates &&
    lhs.thrusts == rhs.thrusts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dodgeros_msgs::Command_<ContainerAllocator1> & lhs, const ::dodgeros_msgs::Command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dodgeros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dodgeros_msgs::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dodgeros_msgs::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dodgeros_msgs::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dodgeros_msgs::Command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dodgeros_msgs::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dodgeros_msgs::Command_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dodgeros_msgs::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d577bccd8c13adfb614a4c929e12409";
  }

  static const char* value(const ::dodgeros_msgs::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d577bccd8c13adfULL;
  static const uint64_t static_value2 = 0xb614a4c929e12409ULL;
};

template<class ContainerAllocator>
struct DataType< ::dodgeros_msgs::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dodgeros_msgs/Command";
  }

  static const char* value(const ::dodgeros_msgs::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dodgeros_msgs::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"\n"
"# Time [s]\n"
"float64 t\n"
"\n"
"# If input is in terms of collective thrust & bodyrates or single rotor thrusts\n"
"bool is_single_rotor_thrust\n"
"\n"
"# Collective mass-normalized thrust [m/s^2]\n"
"float64 collective_thrust\n"
"\n"
"# Angular rates in body frame [rad/s]\n"
"geometry_msgs/Vector3 bodyrates\n"
"\n"
"# Single rotor thrusts [N]\n"
"float64[4] thrusts\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::dodgeros_msgs::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dodgeros_msgs::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.t);
      stream.next(m.is_single_rotor_thrust);
      stream.next(m.collective_thrust);
      stream.next(m.bodyrates);
      stream.next(m.thrusts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dodgeros_msgs::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dodgeros_msgs::Command_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "t: ";
    Printer<double>::stream(s, indent + "  ", v.t);
    s << indent << "is_single_rotor_thrust: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_single_rotor_thrust);
    s << indent << "collective_thrust: ";
    Printer<double>::stream(s, indent + "  ", v.collective_thrust);
    s << indent << "bodyrates: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.bodyrates);
    s << indent << "thrusts[]" << std::endl;
    for (size_t i = 0; i < v.thrusts.size(); ++i)
    {
      s << indent << "  thrusts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.thrusts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DODGEROS_MSGS_MESSAGE_COMMAND_H
