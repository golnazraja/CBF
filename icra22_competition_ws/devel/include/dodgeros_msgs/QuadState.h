// Generated by gencpp from file dodgeros_msgs/QuadState.msg
// DO NOT EDIT!


#ifndef DODGEROS_MSGS_MESSAGE_QUADSTATE_H
#define DODGEROS_MSGS_MESSAGE_QUADSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace dodgeros_msgs
{
template <class ContainerAllocator>
struct QuadState_
{
  typedef QuadState_<ContainerAllocator> Type;

  QuadState_()
    : header()
    , t(0.0)
    , pose()
    , velocity()
    , acceleration()
    , acc_bias()
    , gyr_bias()
    , jerk()
    , snap()
    , motors()  {
    }
  QuadState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , t(0.0)
    , pose(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)
    , acc_bias(_alloc)
    , gyr_bias(_alloc)
    , jerk(_alloc)
    , snap(_alloc)
    , motors(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _t_type;
  _t_type t;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc_bias_type;
  _acc_bias_type acc_bias;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gyr_bias_type;
  _gyr_bias_type gyr_bias;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _jerk_type;
  _jerk_type jerk;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _snap_type;
  _snap_type snap;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motors_type;
  _motors_type motors;





  typedef boost::shared_ptr< ::dodgeros_msgs::QuadState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dodgeros_msgs::QuadState_<ContainerAllocator> const> ConstPtr;

}; // struct QuadState_

typedef ::dodgeros_msgs::QuadState_<std::allocator<void> > QuadState;

typedef boost::shared_ptr< ::dodgeros_msgs::QuadState > QuadStatePtr;
typedef boost::shared_ptr< ::dodgeros_msgs::QuadState const> QuadStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dodgeros_msgs::QuadState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dodgeros_msgs::QuadState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dodgeros_msgs::QuadState_<ContainerAllocator1> & lhs, const ::dodgeros_msgs::QuadState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.t == rhs.t &&
    lhs.pose == rhs.pose &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.acc_bias == rhs.acc_bias &&
    lhs.gyr_bias == rhs.gyr_bias &&
    lhs.jerk == rhs.jerk &&
    lhs.snap == rhs.snap &&
    lhs.motors == rhs.motors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dodgeros_msgs::QuadState_<ContainerAllocator1> & lhs, const ::dodgeros_msgs::QuadState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dodgeros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dodgeros_msgs::QuadState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dodgeros_msgs::QuadState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dodgeros_msgs::QuadState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dodgeros_msgs::QuadState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dodgeros_msgs::QuadState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dodgeros_msgs::QuadState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dodgeros_msgs::QuadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64abc96085c98da0b390e079b723be37";
  }

  static const char* value(const ::dodgeros_msgs::QuadState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64abc96085c98da0ULL;
  static const uint64_t static_value2 = 0xb390e079b723be37ULL;
};

template<class ContainerAllocator>
struct DataType< ::dodgeros_msgs::QuadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dodgeros_msgs/QuadState";
  }

  static const char* value(const ::dodgeros_msgs::QuadState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dodgeros_msgs::QuadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Time [s]\n"
"float64 t\n"
"\n"
"# Pose\n"
"geometry_msgs/Pose pose\n"
"\n"
"# Linear & angular velocity\n"
"geometry_msgs/Twist velocity\n"
"\n"
"# Linear & angular acceleration\n"
"geometry_msgs/Twist acceleration\n"
"\n"
"# Acc bias\n"
"geometry_msgs/Vector3 acc_bias\n"
"\n"
"# Gyro bias\n"
"geometry_msgs/Vector3 gyr_bias\n"
"\n"
"# Jerk\n"
"geometry_msgs/Vector3 jerk\n"
"\n"
"# Snap\n"
"geometry_msgs/Vector3 snap\n"
"\n"
"# Motor speeds\n"
"float64[] motors\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::dodgeros_msgs::QuadState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dodgeros_msgs::QuadState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.t);
      stream.next(m.pose);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.acc_bias);
      stream.next(m.gyr_bias);
      stream.next(m.jerk);
      stream.next(m.snap);
      stream.next(m.motors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QuadState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dodgeros_msgs::QuadState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dodgeros_msgs::QuadState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "t: ";
    Printer<double>::stream(s, indent + "  ", v.t);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "acc_bias: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc_bias);
    s << indent << "gyr_bias: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gyr_bias);
    s << indent << "jerk: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.jerk);
    s << indent << "snap: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.snap);
    s << indent << "motors[]" << std::endl;
    for (size_t i = 0; i < v.motors.size(); ++i)
    {
      s << indent << "  motors[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DODGEROS_MSGS_MESSAGE_QUADSTATE_H
