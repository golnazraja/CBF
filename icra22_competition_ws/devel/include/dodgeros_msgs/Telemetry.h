// Generated by gencpp from file dodgeros_msgs/Telemetry.msg
// DO NOT EDIT!


#ifndef DODGEROS_MSGS_MESSAGE_TELEMETRY_H
#define DODGEROS_MSGS_MESSAGE_TELEMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/String.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <dodgeros_msgs/QuadState.h>

namespace dodgeros_msgs
{
template <class ContainerAllocator>
struct Telemetry_
{
  typedef Telemetry_<ContainerAllocator> Type;

  Telemetry_()
    : header()
    , t(0.0)
    , bridge_type()
    , bridge_armed()
    , guard_triggered()
    , num_references_in_queue(0)
    , reference_left_duration(0.0)
    , rmse(0.0)
    , reference()
    , voltage(0.0)  {
    }
  Telemetry_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , t(0.0)
    , bridge_type(_alloc)
    , bridge_armed(_alloc)
    , guard_triggered(_alloc)
    , num_references_in_queue(0)
    , reference_left_duration(0.0)
    , rmse(0.0)
    , reference(_alloc)
    , voltage(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _t_type;
  _t_type t;

   typedef  ::std_msgs::String_<ContainerAllocator>  _bridge_type_type;
  _bridge_type_type bridge_type;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _bridge_armed_type;
  _bridge_armed_type bridge_armed;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _guard_triggered_type;
  _guard_triggered_type guard_triggered;

   typedef int32_t _num_references_in_queue_type;
  _num_references_in_queue_type num_references_in_queue;

   typedef double _reference_left_duration_type;
  _reference_left_duration_type reference_left_duration;

   typedef double _rmse_type;
  _rmse_type rmse;

   typedef  ::dodgeros_msgs::QuadState_<ContainerAllocator>  _reference_type;
  _reference_type reference;

   typedef double _voltage_type;
  _voltage_type voltage;





  typedef boost::shared_ptr< ::dodgeros_msgs::Telemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dodgeros_msgs::Telemetry_<ContainerAllocator> const> ConstPtr;

}; // struct Telemetry_

typedef ::dodgeros_msgs::Telemetry_<std::allocator<void> > Telemetry;

typedef boost::shared_ptr< ::dodgeros_msgs::Telemetry > TelemetryPtr;
typedef boost::shared_ptr< ::dodgeros_msgs::Telemetry const> TelemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dodgeros_msgs::Telemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dodgeros_msgs::Telemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dodgeros_msgs::Telemetry_<ContainerAllocator1> & lhs, const ::dodgeros_msgs::Telemetry_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.t == rhs.t &&
    lhs.bridge_type == rhs.bridge_type &&
    lhs.bridge_armed == rhs.bridge_armed &&
    lhs.guard_triggered == rhs.guard_triggered &&
    lhs.num_references_in_queue == rhs.num_references_in_queue &&
    lhs.reference_left_duration == rhs.reference_left_duration &&
    lhs.rmse == rhs.rmse &&
    lhs.reference == rhs.reference &&
    lhs.voltage == rhs.voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dodgeros_msgs::Telemetry_<ContainerAllocator1> & lhs, const ::dodgeros_msgs::Telemetry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dodgeros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dodgeros_msgs::Telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dodgeros_msgs::Telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dodgeros_msgs::Telemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dodgeros_msgs::Telemetry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dodgeros_msgs::Telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dodgeros_msgs::Telemetry_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dodgeros_msgs::Telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5251574f675e7717477eef1003887d54";
  }

  static const char* value(const ::dodgeros_msgs::Telemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5251574f675e7717ULL;
  static const uint64_t static_value2 = 0x477eef1003887d54ULL;
};

template<class ContainerAllocator>
struct DataType< ::dodgeros_msgs::Telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dodgeros_msgs/Telemetry";
  }

  static const char* value(const ::dodgeros_msgs::Telemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dodgeros_msgs::Telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Time [s]\n"
"float64 t\n"
"\n"
"# Bridge\n"
"std_msgs/String bridge_type\n"
"std_msgs/Bool bridge_armed\n"
"std_msgs/Bool guard_triggered\n"
"\n"
"# Reference\n"
"int32 num_references_in_queue\n"
"float64 reference_left_duration\n"
"float64 rmse\n"
"dodgeros_msgs/QuadState reference\n"
"\n"
"# Onboard Telemetry\n"
"float64 voltage\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: dodgeros_msgs/QuadState\n"
"Header header\n"
"\n"
"# Time [s]\n"
"float64 t\n"
"\n"
"# Pose\n"
"geometry_msgs/Pose pose\n"
"\n"
"# Linear & angular velocity\n"
"geometry_msgs/Twist velocity\n"
"\n"
"# Linear & angular acceleration\n"
"geometry_msgs/Twist acceleration\n"
"\n"
"# Acc bias\n"
"geometry_msgs/Vector3 acc_bias\n"
"\n"
"# Gyro bias\n"
"geometry_msgs/Vector3 gyr_bias\n"
"\n"
"# Jerk\n"
"geometry_msgs/Vector3 jerk\n"
"\n"
"# Snap\n"
"geometry_msgs/Vector3 snap\n"
"\n"
"# Motor speeds\n"
"float64[] motors\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::dodgeros_msgs::Telemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dodgeros_msgs::Telemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.t);
      stream.next(m.bridge_type);
      stream.next(m.bridge_armed);
      stream.next(m.guard_triggered);
      stream.next(m.num_references_in_queue);
      stream.next(m.reference_left_duration);
      stream.next(m.rmse);
      stream.next(m.reference);
      stream.next(m.voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Telemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dodgeros_msgs::Telemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dodgeros_msgs::Telemetry_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "t: ";
    Printer<double>::stream(s, indent + "  ", v.t);
    s << indent << "bridge_type: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.bridge_type);
    s << indent << "bridge_armed: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.bridge_armed);
    s << indent << "guard_triggered: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.guard_triggered);
    s << indent << "num_references_in_queue: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_references_in_queue);
    s << indent << "reference_left_duration: ";
    Printer<double>::stream(s, indent + "  ", v.reference_left_duration);
    s << indent << "rmse: ";
    Printer<double>::stream(s, indent + "  ", v.rmse);
    s << indent << "reference: ";
    s << std::endl;
    Printer< ::dodgeros_msgs::QuadState_<ContainerAllocator> >::stream(s, indent + "  ", v.reference);
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DODGEROS_MSGS_MESSAGE_TELEMETRY_H
