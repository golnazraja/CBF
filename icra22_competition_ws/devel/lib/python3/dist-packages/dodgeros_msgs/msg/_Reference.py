# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dodgeros_msgs/Reference.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dodgeros_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class Reference(genpy.Message):
  _md5sum = "e374aa4139d56741a12f70c4fa22044e"
  _type = "dodgeros_msgs/Reference"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

dodgeros_msgs/Setpoint[] points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: dodgeros_msgs/Setpoint
# Angular rates in body frame
dodgeros_msgs/QuadState state

# Single rotor thrusts
dodgeros_msgs/Command command

================================================================================
MSG: dodgeros_msgs/QuadState
Header header

# Time [s]
float64 t

# Pose
geometry_msgs/Pose pose

# Linear & angular velocity
geometry_msgs/Twist velocity

# Linear & angular acceleration
geometry_msgs/Twist acceleration

# Acc bias
geometry_msgs/Vector3 acc_bias

# Gyro bias
geometry_msgs/Vector3 gyr_bias

# Jerk
geometry_msgs/Vector3 jerk

# Snap
geometry_msgs/Vector3 snap

# Motor speeds
float64[] motors

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: dodgeros_msgs/Command
Header header 

# Time [s]
float64 t

# If input is in terms of collective thrust & bodyrates or single rotor thrusts
bool is_single_rotor_thrust

# Collective mass-normalized thrust [m/s^2]
float64 collective_thrust

# Angular rates in body frame [rad/s]
geometry_msgs/Vector3 bodyrates

# Single rotor thrusts [N]
float64[4] thrusts
"""
  __slots__ = ['header','points']
  _slot_types = ['std_msgs/Header','dodgeros_msgs/Setpoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Reference, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.points is None:
        self.points = []
    else:
      self.header = std_msgs.msg.Header()
      self.points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v1 = val1.state
        _v2 = _v1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.t
        buff.write(_get_struct_d().pack(_x))
        _v4 = _v1.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v7 = _v1.velocity
        _v8 = _v7.linear
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = _v7.angular
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = _v1.acceleration
        _v11 = _v10.linear
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = _v10.angular
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v13 = _v1.acc_bias
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = _v1.gyr_bias
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v1.jerk
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v16 = _v1.snap
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v1.motors)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.motors))
        _v17 = val1.command
        _v18 = _v17.header
        _x = _v18.seq
        buff.write(_get_struct_I().pack(_x))
        _v19 = _v18.stamp
        _x = _v19
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v18.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v17
        buff.write(_get_struct_dBd().pack(_x.t, _x.is_single_rotor_thrust, _x.collective_thrust))
        _v20 = _v17.bodyrates
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_4d().pack(*_v17.thrusts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = dodgeros_msgs.msg.Setpoint()
        _v21 = val1.state
        _v22 = _v21.header
        start = end
        end += 4
        (_v22.seq,) = _get_struct_I().unpack(str[start:end])
        _v23 = _v22.stamp
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v22.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v22.frame_id = str[start:end]
        start = end
        end += 8
        (_v21.t,) = _get_struct_d().unpack(str[start:end])
        _v24 = _v21.pose
        _v25 = _v24.position
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v26 = _v24.orientation
        _x = _v26
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v27 = _v21.velocity
        _v28 = _v27.linear
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v29 = _v27.angular
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v30 = _v21.acceleration
        _v31 = _v30.linear
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v32 = _v30.angular
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v33 = _v21.acc_bias
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v34 = _v21.gyr_bias
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v35 = _v21.jerk
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v36 = _v21.snap
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v21.motors = s.unpack(str[start:end])
        _v37 = val1.command
        _v38 = _v37.header
        start = end
        end += 4
        (_v38.seq,) = _get_struct_I().unpack(str[start:end])
        _v39 = _v38.stamp
        _x = _v39
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v38.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v38.frame_id = str[start:end]
        _x = _v37
        start = end
        end += 17
        (_x.t, _x.is_single_rotor_thrust, _x.collective_thrust,) = _get_struct_dBd().unpack(str[start:end])
        _v37.is_single_rotor_thrust = bool(_v37.is_single_rotor_thrust)
        _v40 = _v37.bodyrates
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 32
        _v37.thrusts = _get_struct_4d().unpack(str[start:end])
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _v41 = val1.state
        _v42 = _v41.header
        _x = _v42.seq
        buff.write(_get_struct_I().pack(_x))
        _v43 = _v42.stamp
        _x = _v43
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v42.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v41.t
        buff.write(_get_struct_d().pack(_x))
        _v44 = _v41.pose
        _v45 = _v44.position
        _x = _v45
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v46 = _v44.orientation
        _x = _v46
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v47 = _v41.velocity
        _v48 = _v47.linear
        _x = _v48
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v49 = _v47.angular
        _x = _v49
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v50 = _v41.acceleration
        _v51 = _v50.linear
        _x = _v51
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v52 = _v50.angular
        _x = _v52
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v53 = _v41.acc_bias
        _x = _v53
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v54 = _v41.gyr_bias
        _x = _v54
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v55 = _v41.jerk
        _x = _v55
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v56 = _v41.snap
        _x = _v56
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v41.motors)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v41.motors.tostring())
        _v57 = val1.command
        _v58 = _v57.header
        _x = _v58.seq
        buff.write(_get_struct_I().pack(_x))
        _v59 = _v58.stamp
        _x = _v59
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v58.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v57
        buff.write(_get_struct_dBd().pack(_x.t, _x.is_single_rotor_thrust, _x.collective_thrust))
        _v60 = _v57.bodyrates
        _x = _v60
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v57.thrusts.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.points is None:
        self.points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.points = []
      for i in range(0, length):
        val1 = dodgeros_msgs.msg.Setpoint()
        _v61 = val1.state
        _v62 = _v61.header
        start = end
        end += 4
        (_v62.seq,) = _get_struct_I().unpack(str[start:end])
        _v63 = _v62.stamp
        _x = _v63
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v62.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v62.frame_id = str[start:end]
        start = end
        end += 8
        (_v61.t,) = _get_struct_d().unpack(str[start:end])
        _v64 = _v61.pose
        _v65 = _v64.position
        _x = _v65
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v66 = _v64.orientation
        _x = _v66
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v67 = _v61.velocity
        _v68 = _v67.linear
        _x = _v68
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v69 = _v67.angular
        _x = _v69
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v70 = _v61.acceleration
        _v71 = _v70.linear
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v72 = _v70.angular
        _x = _v72
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v73 = _v61.acc_bias
        _x = _v73
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v74 = _v61.gyr_bias
        _x = _v74
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v75 = _v61.jerk
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v76 = _v61.snap
        _x = _v76
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v61.motors = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v77 = val1.command
        _v78 = _v77.header
        start = end
        end += 4
        (_v78.seq,) = _get_struct_I().unpack(str[start:end])
        _v79 = _v78.stamp
        _x = _v79
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v78.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v78.frame_id = str[start:end]
        _x = _v77
        start = end
        end += 17
        (_x.t, _x.is_single_rotor_thrust, _x.collective_thrust,) = _get_struct_dBd().unpack(str[start:end])
        _v77.is_single_rotor_thrust = bool(_v77.is_single_rotor_thrust)
        _v80 = _v77.bodyrates
        _x = _v80
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 32
        _v77.thrusts = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
        self.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_dBd = None
def _get_struct_dBd():
    global _struct_dBd
    if _struct_dBd is None:
        _struct_dBd = struct.Struct("<dBd")
    return _struct_dBd
