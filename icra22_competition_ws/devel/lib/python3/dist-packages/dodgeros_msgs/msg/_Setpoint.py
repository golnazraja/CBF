# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dodgeros_msgs/Setpoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dodgeros_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class Setpoint(genpy.Message):
  _md5sum = "7664ff7a9a9bd8a5486517df47844f44"
  _type = "dodgeros_msgs/Setpoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Angular rates in body frame
dodgeros_msgs/QuadState state

# Single rotor thrusts
dodgeros_msgs/Command command

================================================================================
MSG: dodgeros_msgs/QuadState
Header header

# Time [s]
float64 t

# Pose
geometry_msgs/Pose pose

# Linear & angular velocity
geometry_msgs/Twist velocity

# Linear & angular acceleration
geometry_msgs/Twist acceleration

# Acc bias
geometry_msgs/Vector3 acc_bias

# Gyro bias
geometry_msgs/Vector3 gyr_bias

# Jerk
geometry_msgs/Vector3 jerk

# Snap
geometry_msgs/Vector3 snap

# Motor speeds
float64[] motors

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: dodgeros_msgs/Command
Header header 

# Time [s]
float64 t

# If input is in terms of collective thrust & bodyrates or single rotor thrusts
bool is_single_rotor_thrust

# Collective mass-normalized thrust [m/s^2]
float64 collective_thrust

# Angular rates in body frame [rad/s]
geometry_msgs/Vector3 bodyrates

# Single rotor thrusts [N]
float64[4] thrusts
"""
  __slots__ = ['state','command']
  _slot_types = ['dodgeros_msgs/QuadState','dodgeros_msgs/Command']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,command

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Setpoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = dodgeros_msgs.msg.QuadState()
      if self.command is None:
        self.command = dodgeros_msgs.msg.Command()
    else:
      self.state = dodgeros_msgs.msg.QuadState()
      self.command = dodgeros_msgs.msg.Command()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.state.header.seq, _x.state.header.stamp.secs, _x.state.header.stamp.nsecs))
      _x = self.state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_32d().pack(_x.state.t, _x.state.pose.position.x, _x.state.pose.position.y, _x.state.pose.position.z, _x.state.pose.orientation.x, _x.state.pose.orientation.y, _x.state.pose.orientation.z, _x.state.pose.orientation.w, _x.state.velocity.linear.x, _x.state.velocity.linear.y, _x.state.velocity.linear.z, _x.state.velocity.angular.x, _x.state.velocity.angular.y, _x.state.velocity.angular.z, _x.state.acceleration.linear.x, _x.state.acceleration.linear.y, _x.state.acceleration.linear.z, _x.state.acceleration.angular.x, _x.state.acceleration.angular.y, _x.state.acceleration.angular.z, _x.state.acc_bias.x, _x.state.acc_bias.y, _x.state.acc_bias.z, _x.state.gyr_bias.x, _x.state.gyr_bias.y, _x.state.gyr_bias.z, _x.state.jerk.x, _x.state.jerk.y, _x.state.jerk.z, _x.state.snap.x, _x.state.snap.y, _x.state.snap.z))
      length = len(self.state.motors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.state.motors))
      _x = self
      buff.write(_get_struct_3I().pack(_x.command.header.seq, _x.command.header.stamp.secs, _x.command.header.stamp.nsecs))
      _x = self.command.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dB4d().pack(_x.command.t, _x.command.is_single_rotor_thrust, _x.command.collective_thrust, _x.command.bodyrates.x, _x.command.bodyrates.y, _x.command.bodyrates.z))
      buff.write(_get_struct_4d().pack(*self.command.thrusts))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = dodgeros_msgs.msg.QuadState()
      if self.command is None:
        self.command = dodgeros_msgs.msg.Command()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.state.header.seq, _x.state.header.stamp.secs, _x.state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 256
      (_x.state.t, _x.state.pose.position.x, _x.state.pose.position.y, _x.state.pose.position.z, _x.state.pose.orientation.x, _x.state.pose.orientation.y, _x.state.pose.orientation.z, _x.state.pose.orientation.w, _x.state.velocity.linear.x, _x.state.velocity.linear.y, _x.state.velocity.linear.z, _x.state.velocity.angular.x, _x.state.velocity.angular.y, _x.state.velocity.angular.z, _x.state.acceleration.linear.x, _x.state.acceleration.linear.y, _x.state.acceleration.linear.z, _x.state.acceleration.angular.x, _x.state.acceleration.angular.y, _x.state.acceleration.angular.z, _x.state.acc_bias.x, _x.state.acc_bias.y, _x.state.acc_bias.z, _x.state.gyr_bias.x, _x.state.gyr_bias.y, _x.state.gyr_bias.z, _x.state.jerk.x, _x.state.jerk.y, _x.state.jerk.z, _x.state.snap.x, _x.state.snap.y, _x.state.snap.z,) = _get_struct_32d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state.motors = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.command.header.seq, _x.command.header.stamp.secs, _x.command.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.command.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.command.t, _x.command.is_single_rotor_thrust, _x.command.collective_thrust, _x.command.bodyrates.x, _x.command.bodyrates.y, _x.command.bodyrates.z,) = _get_struct_dB4d().unpack(str[start:end])
      self.command.is_single_rotor_thrust = bool(self.command.is_single_rotor_thrust)
      start = end
      end += 32
      self.command.thrusts = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.state.header.seq, _x.state.header.stamp.secs, _x.state.header.stamp.nsecs))
      _x = self.state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_32d().pack(_x.state.t, _x.state.pose.position.x, _x.state.pose.position.y, _x.state.pose.position.z, _x.state.pose.orientation.x, _x.state.pose.orientation.y, _x.state.pose.orientation.z, _x.state.pose.orientation.w, _x.state.velocity.linear.x, _x.state.velocity.linear.y, _x.state.velocity.linear.z, _x.state.velocity.angular.x, _x.state.velocity.angular.y, _x.state.velocity.angular.z, _x.state.acceleration.linear.x, _x.state.acceleration.linear.y, _x.state.acceleration.linear.z, _x.state.acceleration.angular.x, _x.state.acceleration.angular.y, _x.state.acceleration.angular.z, _x.state.acc_bias.x, _x.state.acc_bias.y, _x.state.acc_bias.z, _x.state.gyr_bias.x, _x.state.gyr_bias.y, _x.state.gyr_bias.z, _x.state.jerk.x, _x.state.jerk.y, _x.state.jerk.z, _x.state.snap.x, _x.state.snap.y, _x.state.snap.z))
      length = len(self.state.motors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.state.motors.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.command.header.seq, _x.command.header.stamp.secs, _x.command.header.stamp.nsecs))
      _x = self.command.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_dB4d().pack(_x.command.t, _x.command.is_single_rotor_thrust, _x.command.collective_thrust, _x.command.bodyrates.x, _x.command.bodyrates.y, _x.command.bodyrates.z))
      buff.write(self.command.thrusts.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.state is None:
        self.state = dodgeros_msgs.msg.QuadState()
      if self.command is None:
        self.command = dodgeros_msgs.msg.Command()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.state.header.seq, _x.state.header.stamp.secs, _x.state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 256
      (_x.state.t, _x.state.pose.position.x, _x.state.pose.position.y, _x.state.pose.position.z, _x.state.pose.orientation.x, _x.state.pose.orientation.y, _x.state.pose.orientation.z, _x.state.pose.orientation.w, _x.state.velocity.linear.x, _x.state.velocity.linear.y, _x.state.velocity.linear.z, _x.state.velocity.angular.x, _x.state.velocity.angular.y, _x.state.velocity.angular.z, _x.state.acceleration.linear.x, _x.state.acceleration.linear.y, _x.state.acceleration.linear.z, _x.state.acceleration.angular.x, _x.state.acceleration.angular.y, _x.state.acceleration.angular.z, _x.state.acc_bias.x, _x.state.acc_bias.y, _x.state.acc_bias.z, _x.state.gyr_bias.x, _x.state.gyr_bias.y, _x.state.gyr_bias.z, _x.state.jerk.x, _x.state.jerk.y, _x.state.jerk.z, _x.state.snap.x, _x.state.snap.y, _x.state.snap.z,) = _get_struct_32d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state.motors = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.command.header.seq, _x.command.header.stamp.secs, _x.command.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.command.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.command.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.command.t, _x.command.is_single_rotor_thrust, _x.command.collective_thrust, _x.command.bodyrates.x, _x.command.bodyrates.y, _x.command.bodyrates.z,) = _get_struct_dB4d().unpack(str[start:end])
      self.command.is_single_rotor_thrust = bool(self.command.is_single_rotor_thrust)
      start = end
      end += 32
      self.command.thrusts = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_32d = None
def _get_struct_32d():
    global _struct_32d
    if _struct_32d is None:
        _struct_32d = struct.Struct("<32d")
    return _struct_32d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_dB4d = None
def _get_struct_dB4d():
    global _struct_dB4d
    if _struct_dB4d is None:
        _struct_dB4d = struct.Struct("<dB4d")
    return _struct_dB4d
